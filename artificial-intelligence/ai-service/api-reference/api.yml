openapi: 3.0.0
info:
  title: AI Service
  version: ''
  description: |
    The service facilitates and streamlines e-commerce processes of product marketing.
    ***
    **Key Features**
     * Integration with https://platform.openai.com/ platform
     * Possibility to generate product descriptions 
    ***
    **Key Benefits** 
     * Product managers can facilitate and streamline the process of creating and updating product descriptions
     * Creating product descriptions that gain more attention and interest by adapting various writing styles
     * Consistency in tone and language
     * Increased visibility resulting from optimization for search engines
  contact: {}
tags:
  - name: AI Completions
    description: AI Completions
  - name: Text Generation
    description: AI Text Generation
  - name: Agentic
    description: Manage Agents
servers:
  - url: 'https://api.emporix.io'
paths:
  '/ai-service/{tenant}/texts':
    parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
        description: |
          Your Emporix tenant's name.

          **Note**: The tenant name should always be provided in lowercase.
    post:
      summary: Generating text for an object description
      operationId: POST-ai-generate-description
      responses:
        '200':
          $ref: '#/components/responses/200_resp_GET_text_generation'
        '400':
          $ref: '#/components/responses/400_resp_common'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '500':
          $ref: '#/components/responses/500_resp_common'
      description: |-
        Generates a text based on a prompt. Currently supported AI engines for text generation:
        * https://platform.openai.com/

        ***
        Prerequisite: Using the AI service requires an API token, you have to either configure your own OpenAI account, or use the Emporix one. To configure your own OpenAI token, use the configuration service by storing the token under `openAiApiToken` key.  
        
        If you don't provide your own OpenAI token, the Emporix one is used with the following limits: 3 mln input tokens and 1 mln output tokens. When you reach the limit, the next requests are rejected and you have to provide your own OpenAI token.
        Emporix uses the gpt-4o-mini model by default.
        If you want to use your own OpenAI account with a different AI model please contact our [Emporix Support Team](mailto:support@emporix.com) to negotiate the model and usage.
        ***

        ### Required scopes

        * `ai.text_manage`
      security:
        - OAuth2:
            - ai.text_manage
      requestBody:
        $ref: '#/components/requestBodies/TextGeneration'
      tags:
        - Text Generation
  '/ai-service/{tenant}/completions':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
    post:
      summary: AI Completions
      operationId: POST-ai-completions
      responses:
        '200':
          $ref: '#/components/responses/200_resp_GET_text_generation'
        '400':
          $ref: '#/components/responses/400_resp_common'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '500':
          $ref: '#/components/responses/500_resp_common'
      description: |-
        Generates a completion based on chat history. Currently supported AI engines for the completion:
        * https://platform.openai.com/


        ***
        Prerequisite: Using the AI service requires an API token, you have to either configure your own OpenAI account, or use the Emporix one. To configure your own OpenAI token, use the configuration service by storing the token under `openAiApiToken` key. 
        
        If you don't provide your own OpenAI token, the Emporix one is used with the following limits: 3 mln input tokens and 1 mln output tokens. When you reach the limit, the next requests are rejected and you have to provide your own OpenAI token. 
        Emporix uses the gpt-4o-mini model by default. If you want to use your own OpenAI account with a different AI model please contact our [Emporix Support Team](mailto:support@emporix.com) to negotiate the model and usage.
        ***

        ### Required scopes

        * `ai.completion_manage`
      security:
        - OAuth2:
            - ai.completion_manage
      requestBody:
        $ref: '#/components/requestBodies/Completion'
      tags:
        - AI Completions
  '/ai-service/{tenant}/agentic/chat':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
      - schema:
          type: string
          format: uuid
        name: session-id
        in: header
        description: Unique session's identifier which allows for storing the context of the chat. It will be generated if not provided.
    post:
      summary: Agent's Chat
      operationId: POST-ai-agents-chat
      responses:
        '200':
          $ref: '#/components/responses/200_resp_GET_agent_chat'
        '400':
          $ref: '#/components/responses/400_resp_common'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '500':
          $ref: '#/components/responses/500_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Allows for communication with Emporix's agents.


        ***
        Prerequisite: Using the AI service requires an API token, you have to either configure your own OpenAI account, or use the Emporix one. To configure your own OpenAI token, use the configuration service by storing the token under `openAiApiToken` key. 
        
        If you don't provide your own OpenAI token, the Emporix one is used with the following limits: 3 mln input tokens and 1 mln output tokens. When you reach the limit, the next requests are rejected and you have to provide your own OpenAI token. 
        Emporix uses the gpt-4o-mini model by default. If you want to use your own OpenAI account with a different AI model please contact our [Emporix Support Team](mailto:support@emporix.com) to negotiate the model and usage.
        ***
        
        ### Required scopes

        * `ai.completion_manage`
      security:
        - OAuth2:
            - ai.completion_manage
      requestBody:
        $ref: '#/components/requestBodies/AgenticChat'
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/templates':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
      - $ref: '#/components/parameters/qParam'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/pageNumber'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/header_xTotalCount'
    get:
      summary: Get available agent templates
      operationId: GET-ai-list-templates
      responses:
        '200':
          description: List of available agent templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentTemplateResponse'
              examples:
                Agent Templates Response:
                  $ref: '#/components/examples/AgentTemplatesResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Retrieves agent templates which can be later use as a base for custom agents.
        
        ### Required scopes

        * `ai.agent_read`
      security:
        - OAuth2:
            - ai.agent_read
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/templates/search':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
    post:
      summary: Search agent templates
      operationId: POST-ai-search-templates
      responses:
        '200':
          description: List of available agent templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentTemplateResponse'
              examples:
                Agent Templates Response:
                  $ref: '#/components/examples/AgentTemplatesResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Searches for agent templates based on the provided query.
        
        ### Required scopes

        * `ai.agent_read`
      security:
        - OAuth2:
            - ai.agent_read
      requestBody:
        $ref: '#/components/requestBodies/AgentTemplateSearch'
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/templates/{templateId}/clone':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
      - schema:
          type: string
        name: templateId
        in: path
        required: true
    post:
      summary: Create agent instance based on the template
      operationId: POST-ai-clone-template
      requestBody:
        $ref: '#/components/requestBodies/AgentTemplateCloneRequest'
      responses:
        '201':
          description: Id of created agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
              examples:
                Cloned Agent Template Response:
                  $ref: '#/components/examples/IdResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Creates an instance of the agent based of the given agent template.
        
        **Info:** Only active templates can be cloned
        
        ### Required scopes

        * `ai.agent_manage`
      security:
        - OAuth2:
            - ai.agent_manage
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/agents':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
    get:
      summary: Get generic agents
      operationId: GET-ai-list-agents
      responses:
        '200':
          description: List of available agent templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentResponse'
              examples:
                Agent Templates Response:
                  $ref: '#/components/examples/AgentResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Retrieves agent templates based on the provided query.
        
        ### Required scopes

        * `ai.agent_read`
      security:
        - OAuth2:
            - ai.agent_read
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/agents/search':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
    post:
      summary: Get generic agents
      operationId: POST-ai-search-agents
      responses:
        '200':
          description: List of available agent templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentResponse'
              examples:
                Agent Templates Response:
                  $ref: '#/components/examples/AgentResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Searches for agent templates based on the provided query.
        
        ### Required scopes

        * `ai.agent_read`
      security:
        - OAuth2:
            - ai.agent_read
      tags:
        - Agentic
  '/ai-service/{tenant}/agentic/agents/{agentId}':
    parameters:
      - $ref: '#/components/parameters/path_tenant'
      - schema:
          type: string
        name: agentId
        in: path
        required: true
    get:
      summary: Get generic agent by Id
      operationId: GET-ai-retrieve-agent
      responses:
        '200':
          description: List of available agent templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentResponse'
              examples:
                Agent Templates Response:
                  $ref: '#/components/examples/AgentResponse'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '404':
          $ref: '#/components/responses/404_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Retrieves the agent by given Id
        
        ### Required scopes

        * `ai.agent_read`
      security:
        - OAuth2:
            - ai.agent_read
      tags:
        - Agentic
    put:
      summary: Upsert generic agents
      operationId: PUT-ai-list-agents
      responses:
        '201':
          description: Id of created agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
              examples:
                Cloned Agent Template Response:
                  $ref: '#/components/examples/IdResponse'
        '204':
          description: The resource has been successfully updated.
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '404':
          $ref: '#/components/responses/404_resp_common'
        '409':
          $ref: '#/components/responses/409_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Updates or creates a specified product by replacing all of its existing data with data from the request body.
        If the `metadata.version` is provided then optimistic locking is enabled and version must match the version in the database.
        
        ### Required scopes

        * `ai.agent_manage`
      security:
        - OAuth2:
            - ai.agent_manage
      requestBody:
        $ref: '#/components/requestBodies/agentUpsertBody'
      tags:
        - Agentic
    patch:
      summary: Partially update generic agent
      operationId: PATCH-ai-update-agent
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '404':
          $ref: '#/components/responses/404_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Partially updates a single approval document with given information. To update the approval, the user needs to be a requestor or an approval giver. 
        Single update may contain multiple partial updates in the form of an array. It contains the allowed operations list:
          - `add` (adding an item to the items list)
          - `remove` (removing an item from the items list)
          - `replace` (replacing an item with given id with new definition)
        
        ### Required scopes

        * `ai.agent_manage`
      security:
        - OAuth2:
            - ai.agent_manage
      requestBody:
        $ref: '#/components/requestBodies/agentPatchBody'
      tags:
        - Agentic
    delete:
      summary: Delete generic agent
      operationId: DELETE-ai-delete-agent
      responses:
        '204':
          description: Given agent has been deleted
        '400':
          $ref: '#/components/responses/400_resp_common'
        '401':
          $ref: '#/components/responses/401_resp_common'
        '403':
          $ref: '#/components/responses/403_resp_common'
        '404':
          $ref: '#/components/responses/404_resp_common'
      description: |-
        ![Preview](https://res.cloudinary.com/saas-ag/image/upload/v1752824268/emporix/icons/preview_api1.png)
        Deletes agent by given Id.
        
        ### Required scopes

        * `ai.agent_manage`
      security:
        - OAuth2:
            - ai.agent_manage
      tags:
        - Agentic
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        code:
          type: integer
        type:
          type: string
        message:
          type: string
        moreInfo:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              type:
                type: string
              message:
                type: string
              moreInfo:
                type: string
      description: ''
    ErrorMessageFault:
      type: object
      properties:
        fault:
          type: object
          properties:
            faultstring:
              type: string
            detail:
              type: object
              properties:
                errorcode:
                  type: string
    AgenticRequest:
      type: object
      required:
        - message
      properties:
        agent_type:
          $ref: '#/components/schemas/AgentType'
        message:
          type: string
          description: The user message to the agent
        data:
          type: object
          additionalProperties: true
          description: Optional arbitrary data passed to the agent
    AgentType:
      type: string
      description: Type of the agent handling the request
      enum:
        - SUPPORT
        - GENERIC
        - COMPLAINT
        - SUPERVISOR
    TextGenerationRequest:
      title: TextGenerationRequest
      type: object
      description: Represents a request body for a text generation operation.
      required:
        - prompt
      properties:
        id:
          type: string
          description: Identifier of the request. The value is not mandatory - if provided then the id is returned in the text generation response.
        prompt:
          type: string
          description: A prompt to AI engine. A desired text content is generated based on the prompt.
        maxTokens:
          type: integer
          description: Maximum number of tokens that should be used during text generation. If not provided then 4097 is used.
    AgenticResponse:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
        message:
          type: string
          description: The response message from the agent
        metadata:
          type: object
          properties:
            totalTokens:
              type: integer
              description: Total number of token taken by the last call.
            promptTokens:
              type: integer
              description: Number of tokens taken by the input (prompt).
            outputTokens:
              type: integer
              description: Number of tokens taken by the output.
        sessionId:
          type: string
          format: uuid
          description: Session identifier for tracking purposes
    IdResponse:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the resource.
    AgentTemplateResponse:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the agent template.
        name:
          type: string
          description: Name of the agent template.
        description:
          type: string
          description: Description of the agent template.
        type:
          type: string
          enum:
            - SUPPORT
            - COMPLAINT
          description: Type of the agent template.
        icon:
          type: string
          description: fa class of react icon
        tags:
          type: array
          items:
            type: string
            description: allows to categorise the agent templates
        mcpServers:
          type: array
          items:
            $ref: '#/components/schemas/McpServer'
        nativeTools:
          type: array
          items:
            $ref: '#/components/schemas/GenericAgentTool'
        enabled:
          type: boolean
          description: Whether the agent template is enabled.
    AgentRequest:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the agent.
        name:
          type: string
          description: Name of the agent.
        description:
          type: string
          description: Description of the agent.
        systemPrompt:
          type: string
          description: System prompt of the agent.
        trigger:
          type: object
          properties:
            type:
              type: string
              enum:
                - endpoint
              description: Type of the trigger.
        llmConfig:
          type: object
          properties:
            model:
              type: string
              description: Model of the agent.
            temperature:
              type: number
              description: Temperature of the agent.
            maxTokens:
              type: integer
              description: Maximum number of tokens.
            apiKey:
              type: string
              description: API key of the provider.
            provider:
              type: string
              enum:
                - OPENAI
                - EMPORIX_OPENAI
              description: Provider of the agent.
          required:
            - provider
        mcpServers:
          type: array
          items:
            $ref: '#/components/schemas/McpServer'
        nativeTools:
          type: array
          items:
            $ref: '#/components/schemas/GenericAgentTool'
        agentCollaborations:
          type: array
          items:
            type: object
            properties:
              agentId:
                type: string
                description: Identifier of the agent.
              description:
                type: string
                description: Description of the agent collaboration.
        enableMemory:
          type: boolean
          description: Whether the agent should use memory.
        maxRecursionLimit:
          type: integer
          maximum: 50
          description: Maximum number of recursion limit.
        enabled:
          type: boolean
          description: Whether the agent is enabled.
        type:
          type: string
          enum:
            - SUPPORT
            - COMPLAINT
          description: Type of the agent.
        icon:
          type: string
          description: fa class of the react icon
        tags:
          type: array
          items:
            type: string
            description: allows to categorise the agent templates
        metadata:
          $ref: '#/components/schemas/basicMetadata'
      required:
        - name
        - systemPrompt
        - llmConfig
        - trigger
    AgentResponse:
      allOf:
        - $ref: '#/components/schemas/AgentRequest'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/metadata'
    basicMetadata:
      type: object
      properties:
        version:
          minimum: 1
          type: integer
          description: Version of the object. The version is required during the update operation because of the optimistic locking mechanism.
      required:
        - version
    metadata:
      allOf:
        - $ref: '#/components/schemas/basicMetadata'
        - type: object
          properties:
            createdAt:
              description: 'Date and time when the object was created. The value is approved as an ISO-8601 representation of an Instant. For example: `2022-04-31T13:18:02.379Z`'
              type: string
            modifiedAt:
              description: 'Date and time when the object was last modified. The value is approved as an ISO-8601 representation of an Instant. For example: `2022-04-31T13:18:02.379Z`'
              type: string
          required:
            - version
            - createdAt
            - modifiedAt
    GenerationResponse:
      title: GenerationResponse
      type: object
      description: Object represents the text generation response.
      properties:
        id:
          type: string
          description: 'Identifier of the text generation request. The value is populated only if the id was provided in the request. '
        result:
          type: string
          description: Text generation result.
    CompletionRequest:
      title: CompletionRequest
      type: object
      required:
        - messages
      properties:
        id:
          type: string
          description: Identifier of the request. The value is not mandatory - if provided then the id is returned in the text generation response.
        messages:
          type: array
          items:
            type: object
            required:
              - role
              - content
            properties:
              role:
                type: string
                enum:
                  - USER
                  - SYSTEM
                  - ASSISTANT
                description: A role of the message. `SYSTEM` role should provide an instruction for AI about background of the conversation. `USER` role is used for user message. `ASSISTANT` is used for content generated by AI.
              content:
                type: string
                description: 'Content of the message. Depending on the role parameter it can be a background instruction, user instruction or AI response.'
    AgentTemplateSearch:
      type: object
      properties:
        q:
          type: string
          description: |
            A standard query parameter is used to search for specific values. 
            
            See: [Standard practises - Query parameter](https://developer.emporix.io/docs/content/q-param/)
    AgentTemplateCloneRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the creating agent.
        description:
          type: string
          description: Description of the creating agent.
        id:
          type: string
          description: Identifier of the creating agent. If not provided, a random value is generated.
      required:
        - name
        - description
    McpServer:
      type: object
      properties:
        name:
          type: string
          description: Name of the MCP server.
        enabled:
          type: boolean
          description: Whether the MCP server is enabled.
        type:
          type: string
          description: Type of the MCP server.
        tools:
          type: array
          items:
            type: string
            description: Tool available for the MCP server.
    GenericAgentTool:
      type: object
      properties:
        name:
          type: string
          description: Name of the generic agent tool.
        enabled:
          type: boolean
          description: Whether the generic agent tool is enabled.
    agentPatchRequest:
      type: array
      description: Agent partial update operation list.
      items:
        type: object
        properties:
          op:
            anyOf:
              - enum:
                  - ADD
                  - REMOVE
                  - REPLACE
            type: string
          path:
            anyOf:
              - enum:
                  - /name
                  - /description
                  - /llmConfig/model
            type: string
          value:
            anyOf:
              - type: string
                description: Value of the string type
              - type: object
                description: Any part of the details object
        required:
          - op
          - path
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          scopes:
            ai.text_manage: Needed to execute actions related to the text generation.
            ai.completion_manage: Needed to execute actions related to the AI completions.
            ai.agent_read: Needed to read AI agents
            ai.agent_manage: Needed to manage AI agents
          tokenUrl: 'https://api.emporix.io/oauth/token'
  parameters:
    path_tenant:
      name: tenant
      in: path
      required: true
      schema:
        type: string
      description: |
        Your Emporix tenant's name.

        **Note**: The tenant name should always be provided in lowercase.
    header_Accept-Language:
      name: Accept-Language
      in: header
      required: false
      schema:
        type: string
      description: |
        List of language codes acceptable for the response. You can specify factors that indicate which language should be retrieved if the one with a higher factor was not found in the localized fields.

        * If the header is set to a particular language or a list of languages, all localized fields are retrieved as strings.
        * If the header is set to `*`, all localized fields are retrieved as maps of translations, where the keys are language codes and values are the fields in their respective languages.
        * If the header is empty, localized fields are retrieved in the default language defined in the Configuration Service.
    header_Content-Language:
      name: Content-Language
      in: header
      required: false
      schema:
        type: string
      description: |
        List of languages in which localized fields in the request body are provided.

        * If the header is set to `*`, the localized fields should be provided as maps of translations, where the keys are language codes and values are the fields in their respective languages.
        * If the header is set to a specific language, the localized fields should be provided as strings.
        * If the header is empty, the endpoint will assume that the localized fields are provided in the default language defined in the Configuration Service.

        **Note**: You can provide the localized fields only in languages defined in the Configuration Service. In case the fields are provided in languages that are not defined in the Configuration Service, the request will be rejected.
    header_xTotalCount:
      schema:
        type: boolean
      in: header
      name: X-Total-Count
      description: Flag indicating whether the total number of retrieved results should be returned.
    qParam:
      in: query
      name: q
      description:  |
        A standard query parameter is used to search for specific values. 
        
        See: [Standard practises - Query parameter](https://developer.emporix.io/docs/content/q-param)
      schema:
        type: string
    pageSize:
      schema:
        type: string
      in: query
      name: pageSize
      description: The number of documents to be retrieved per page.
    pageNumber:
      schema:
        type: string
      in: query
      name: pageNumber
      description: The page number to be retrieved. The size of the pages should be specified by the pageSize parameter.
    sort:
      schema:
        type: string
      in: query
      name: sort
      description: List of properties used to sort the results, separated by colons.
    fields:
      schema:
        type: string
      in: query
      name: fields
      description: Fields to be returned in the response.
  responses:
    401_resp_common:
      description: The authorization token is invalid or has expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageFault'
          examples:
            Invalid access token:
              value:
                fault:
                  faultstring: Invalid access token
                  detail:
                    errorcode: oauth.v2.InvalidAccessToken
            Access token expired:
              value:
                fault:
                  faultstring: Access Token expired
                  detail:
                    errorcode: keymanagement.service.access_token_expired
    403_resp_common:
      description: Authorization scopes of the access token are not sufficient and do not match the scopes required by the endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Access forbidden:
              value:
                code: 403
                status: Forbidden
                message: The access to the requested resource has been forbidden by the server.
    500_resp_common:
      description: A server-side error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Internal Server Error:
              value:
                code: 500
                status: Internal Server Error
                message: Problem encountered while trying to connect to the database.
    400_resp_common:
      description: The request was syntactically incorrect.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Code must not be null:
              value:
                code: 400
                status: Bad Request
                message: Validation problem with request body.
                details:
                  - message: code must not be null nor blank
    404_resp_common:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Resource not found:
              value:
                resourceId: 628cd20c6e8b2432b6346ca6
                code: 404
                status: Not Found
                message: The resource with id 628cd20c6e8b2432b6346ca6 has not been found.
    409_resp_common:
      description: |
        There are three possible reasons:
         1. Resource with given code already exists, please choose unique code for your resource
         2. Optimistic locking failed. If user sends metadata/version attribute which is outdated (someone else updated resource in the time user was performing his changes). User should retrieve the latest product data and retry the request.
         3. Optimistic locking failed. User did not provide metadata/version attribute in update request, but someone else updated product while it was internally handled by product service. Resending the same request can result in successful update, but the update can override recently persisted changes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Resource conflict:
              value:
                code: 409
                status: Conflict
                message: Conflict - a resource with given code or id has already exist.
    200_resp_GET_text_generation:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerationResponse'
          examples:
            Text Generation Response:
              value:
                id: en
                result: 'Mini pipe cutters are small cutting tools that are designed to precisely and effectively cut through pipes ranging in size from 3 to 16 millimeters. Unlike some larger pipe cutters, these mini versions are conveniently small and light enough to be carried around easily and used in places where a standard-sized cutter may not be able to fit. They are typically made of hardened steel and are designed to work on most types of tubing and thin-walled plastic piping. The continuous interlocking jaws hold the pipe securely while the cutting blade smoothly and accurately creates a precise and neat cutting edge. Mini pipe cutters are the perfect tool for plumbers and those tackling smaller scale pipe work in hard-to-reach places.'
    200_resp_GET_agent_chat:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgenticResponse'
          examples:
            Agentic Response:
              value:
                agentType: SUPERVISOR
                message: 'Found a product with "EON1243" code. Details...'
                sessionId: fe91d168-4ce9-4b4d-8451-0029035b34a5
                metadata:
                  promptTokens: 150
                  outputTokens: 20
                  totalTokens: 170
  requestBodies:
    TextGeneration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TextGenerationRequest'
          examples:
            Text generation request:
              value:
                id: en
                prompt: 'Generate a long description for product ''pipe cutter'' in language EN '
                maxTokens: 2048
    AgenticChat:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgenticRequest'
          examples:
            Agentic Chat request:
              value:
                agentType: SUPERVISOR
                message: 'Find a product with "EON1243" code'
    Completion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompletionRequest'
          examples:
            Completion request:
              value:
                id: abc-123
                messages:
                  - role: SYSTEM
                    content: You are an assistant responsible for creating a configuration based on information provided by user.
    AgentTemplateSearch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgentTemplateSearch'
          examples:
            Search Request:
              value:
                q: name:~Support
    AgentTemplateCloneRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgentTemplateCloneRequest'
          examples:
            Search Request:
              value:
                name: Complaint Agent
                description: Agent which is responsible for reading emails and base on that resolve the customer's complaints
                id: a81bc81b-dead-4e5d-abff-90865d1e13b1
    agentPatchBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/agentPatchRequest'
          examples:
            Multiple update list:
              value:
                - op: REPLACE
                  path: /description
                  value: New agent description
                - op: REPLACE
                  path: /name
                  value: Complaint Agent
            Change model of the LLM:
              value:
                - op: REPLACE
                  path: /llmConfig/model
                  value: OPENAI
    agentUpsertBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgentRequest'
          examples:
            Create agent:
              $ref: '#/components/examples/AgentRequest'
  examples:
    IdResponse:
      value:
        id: a81bc81b-dead-4e5d-abff-90865d1e13b1
    AgentTemplatesResponse:
      value:
        - id: "123"
          name: Support Agent
          description: Support agent template
          type: SUPPORT
          enabled: true
          tags:
            - productivity
          icon: fa-productivity
          mcpServers:
            - name: Order MCP server
              enabled: true
              type: MCP_SERVER
              tools:
                - get-orders
                - get-order
          nativeTools:
            - name: Slack
              enabled: true
    AgentResponse:
      value:
        - id: "123"
          name: Complaint Agent
          description: Complaint agent
          type: COMPLAINT
          enabled: true
          systemPrompt: "You are an complaint agent for checking emails and do some action"
          llmConfig:
            model: GPT-4.1
            apiKey: secureApiKey
            provider: OPENAI
            maxTokens: 100000
            temperature: 0.2
          trigger:
            type: endpoint
          maxRecurionsLimit: 20
          enabledMemory: true
          tags:
            - productivity
          icon: fa-productivity
          mcpServers:
            - name: Order MCP server
              enabled: true
              type: MCP_SERVER
              tools:
                - get-orders
                - get-order
          nativeTools:
            - name: Slack
              enabled: true
    AgentRequest:
      value:
        - id: "123"
          name: Complaint Agent
          description: Complaint agent
          type: COMPLAINT
          enabled: true
          systemPrompt: "You are an complaint agent for checking emails and do some action"
          llmConfig:
            model: GPT-4.1
            apiKey: secureApiKey
            provider: OPENAI
            maxTokens: 100000
            temperature: 0.2
          trigger:
            type: endpoint
          maxRecurionsLimit: 20
          enabledMemory: true
          tags:
            - productivity
          icon: fa-productivity
          mcpServers:
            - name: Order MCP server
              enabled: true
              type: MCP_SERVER
              tools:
                - get-orders
                - get-order
          nativeTools:
            - name: Slack
              enabled: true